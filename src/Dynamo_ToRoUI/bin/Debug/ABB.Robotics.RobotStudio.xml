<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>ABB.Robotics.RobotStudio</name>
  </assembly>
  <members>
    <member name="T:ABB.Robotics.RobotStudio.AttributeCollection">
      <summary>
            Represents a collection of Attributes attached to a ProjectObject. Attributes are stored as a key/value pair.
            Keys can be assoicated with a Guid. A key with a Guid can only be removed by a client that knows the Guid.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Add(System.Guid,System.String,System.Object)">
      <summary>
            Adds a protected attribute to this AttributeCollection object.
            A protected attribute can only be modified or removed if the access id used when creating it is known.
            </summary>
      <param name="accessId">The access id.</param>
      <param name="key">The key to be added.</param>
      <param name="value">The value to be associated with key. The following types are allowed: <see cref="T:System.Int32" />, <see cref="T:System.Int16" />, <see cref="T:System.Double" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /></param>
      <exception cref="T:System.ArgumentException">
            The key is protected by an access id.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Add(System.String,System.Object)">
      <summary>
            Add an attribute to this AttributeCollection object.
            </summary>
      <param name="key">The key to be added.</param>
      <param name="value">The value to be associated with key, see remarks.</param>
      <exception cref="T:System.ArgumentException">The key is protected by a access id.</exception>
      <exception cref="T:System.NotSupportedException">The value type is not supported.</exception>
      <exception cref="T:System.NullReferenceException">An array may not contain values ​​of null.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.ContainsAttributeKey(System.String)">
      <summary>
            Determines if the <b>AttributeCollection</b> contains a specific key. 
            </summary>
      <param name="key"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index
            </summary>
      <param name="array">Destination Array</param>
      <param name="index">The zero-based index in targetArray at which copying begins</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.CopyTo(System.Attribute[],System.Int32)">
      <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
      <param name="array">Destionation array</param>
      <param name="index">The zero-based index in targetArray at which copying begins.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.GetAttributeKeys">
      <summary>
            Returns all keys in the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection" /></summary>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the keys in the <b>AttributeCollection</b>.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> for the AttributeCollection.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.HasAttributeAccessId(System.String)">
      <summary>
            Check if a key has a accessId connected.
            </summary>
      <param name="key">The key to check.</param>
      <returns>
            True if key has a accessId.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection" /> is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index value is greater than the number of items in the collection.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.Item(System.String)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <param name="key">The key of the item to get.</param>
      <exception cref="T:System.ArgumentException">
            The key value is not in the collection.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Remove(System.Guid,System.String)">
      <summary>
            Removes a protected attribute from this AttributeCollection object.
            </summary>
      <param name="accessId">The access id that was specified when the attribute was added.</param>
      <param name="key">The key of the attribute to be removed.</param>
      <exception cref="T:System.ArgumentException">
            An attribute with the specified key has not been added to the collection or
            the key is protected by an access id.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.Remove(System.String)">
      <summary>
            Removes an attribute from this AttributeCollection object.
            </summary>
      <param name="key">The key of the attribute to be removed.</param>
      <exception cref="T:System.ArgumentException">
            An attribute with the specified key has not been added to the collection or
            the key is protected by an access id.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AttributeCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value with the specified key.</summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, null.</param>
      <returns>true if the AttributeCollection contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">key is a null reference or empty.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.AttributeCollection.TryGetValue``1(System.String,``0@)">
      <summary>Gets the value with the specified key.</summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, null.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:ABB.Robotics.RobotStudio.AttributeCollection.TryGetValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>true if the AttributeCollection contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">key is a null reference or empty.</exception>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs">
      <summary>
            Provides data for the <see cref="!:Project::AutoSaveAvailable" /> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs.Cancel">
      <summary>
            Gets or sets a value that indicates if the load should be canceled.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs.FileName">
      <summary>
            Gets the path to the file that is being loaded.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.AutoSaveAvailableEventArgs.LoadAutoSaveData">
      <summary>
            Gets or sets if auto saved data load.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.AutoSaveAvailableEventHandler">
      <summary>
            Represents the method that will handle the <b>AutoSaveAvailable</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.BuiltinQuantity">
      <summary>
            Specifies the quantities which are supported.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.None">
      <summary>
            No quantity
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Time">
      <summary>
            Time
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Length">
      <summary>
            Length
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Angle">
      <summary>
            Angle
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Velocity">
      <summary>
            Velocity
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Acceleration">
      <summary>
            Acceleration
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.AngularVelocity">
      <summary>
            Angular velocity
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Area">
      <summary>
            Area
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Volume">
      <summary>
            Volume
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Inertia">
      <summary>
            Inertia
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Power">
      <summary>
            Power
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Energy">
      <summary>
            Energy
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.BuiltinQuantity.Mass">
      <summary>
            Mass
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.CancelUndoStepType">
      <summary>
            Specifies how to cancel an undo step.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.CancelUndoStepType.Clear">
      <summary>
            The undo queue is cleared, but the changes in the undo step are retained.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.CancelUndoStepType.Rollback">
      <summary>
            All changes in the undostep are discarded.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.CollectionChangedEventArgs">
      <summary>
            Provides data for the <b>Changed</b> event on various collections.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.CollectionChangedEventArgs.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.CollectionChangedEventArgs" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.CollectionChangedEventArgs.FirstAffectedIndex">
      <summary>
            Gets the zero-based index of the first object that was added or removed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.CollectionChangedEventHandler">
      <summary>
            Represents the method that will handle the <b>Changed</b> event for various collections.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.CollectionChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.CompressorInfo">
      <summary>
            Contains information about a specific compressor (codec)
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.CompressorInfo.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.CompressorInfo" /> class.
            </summary>
      <param name="name"></param>
      <param name="description"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.CompressorInfo.Description">
      <summary>
            Description of the compressor.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.CompressorInfo.Name">
      <summary>
            The name of the codec, such as H264 or WMV3
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.CompressorInfo.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns></returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.CustomProjectObject">
      <summary>
            Base class for custom ProjectObject derived classes.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.CustomProjectObject.RegisterType``1(System.String)">
      <summary>
            Registers a <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject" /> type for persistence.
            </summary>
      <param name="id">A string that uniquely identifies the type.</param>
      <typeparam name="T">The type derived from <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject" /> to register.</typeparam>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.CustomProjectObject.RegisterType(System.String,System.Type)">
      <summary>
            Registers a <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject" /> type for persistence.
            </summary>
      <param name="id">A string that uniquely identifies the type.</param>
      <param name="type">The type derived from <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject" /> to register.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderBase">
      <summary>
            A data recorder collects data from all its souces, and distributes it to its sinks.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderBase.CurrentTime">
      <summary>
            Returns the current time in seconds.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderBase.Sinks">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase" /> objects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderBase.Sources">
      <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderBase.Start">
      <summary>
            Starts recording.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderBase.Stop">
      <summary>
            Stops recording.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.DataRecorderBase.Tick">
      <summary>
            Raised for each time step.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSignal">
      <summary>
            Represents a piece of information that can be recorder by a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderBase">DataRecorder</see></summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.DisplayPath">
      <summary>
            Returns a user-friendly path.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignal.Equals(System.String)">
      <summary>
            Checks if this signal has a specified identifier.
            </summary>
      <param name="id">Identifier</param>
      <returns>True if <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id" /> is equal to the supplied identifier.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignal.GetParametersFromPath(System.String)">
      <summary>
            Splits the <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id" /> or <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.DisplayPath" /> of a signal into its individual parts.
            </summary>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignal.GetPathFromParameters(System.String[])">
      <summary>
            Constructs a signal <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id" /> or <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSignal.DisplayPath" /> from individual parts.
            </summary>
      <param name="array"></param>
      <returns></returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Id">
      <summary>
            Gets a string that uniquely identifies the signal.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.Info">
      <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo" /> that provides information about the signal.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.InitialValue">
      <summary>
            Gets or sets an initial value of the signal data.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignal.SourceId">
      <summary>
            Gets the unique identifier of the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase" /> whence the signal originates.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSignalCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Add(ABB.Robotics.RobotStudio.DataRecorderSignal)">
      <summary>
            Adds a signal to the collection.
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Clear">
      <summary>
            Removes all signals from the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Contains(ABB.Robotics.RobotStudio.DataRecorderSignal)">
      <summary>
            Determines whether the collection contains a specific signal.
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Contains(System.String)">
      <summary>
            Gets if the collection contains a signal with the specified identifier.
            </summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.CopyTo(ABB.Robotics.RobotStudio.DataRecorderSignal[],System.Int32)">
      <summary>
            Copies all signals in the collection to an array.
            </summary>
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Count">
      <summary>
            Gets the number of signals in the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns></returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Item(System.String)">
      <summary>
            Gets the item with the specified signal url.
            </summary>
      <param name="signal">The ID of the item to get.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Remove(ABB.Robotics.RobotStudio.DataRecorderSignal)">
      <summary>
            Removes a signal from the collection.
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalCollection.Remove(System.String)">
      <summary>
            Removes the signal with the specified identifier.
            </summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo">
      <summary>
            Represents information such as data type and quantity of a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal" /></summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo" /> object.
            </summary>
      <param name="dataType"></param>
      <param name="interpolationType"></param>
      <param name="tag"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,ABB.Robotics.RobotStudio.BuiltinQuantity,System.Double,System.Double)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo" /> object.
            </summary>
      <param name="dataType"></param>
      <param name="interpolationType"></param>
      <param name="tag"></param>
      <param name="quantity"></param>
      <param name="approximateMin"></param>
      <param name="approximateMax"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,ABB.Robotics.RobotStudio.BuiltinQuantity,System.Double,System.Double,System.String)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo" /> object.
            </summary>
      <param name="dataType"></param>
      <param name="interpolationType"></param>
      <param name="tag"></param>
      <param name="quantity"></param>
      <param name="approximateMin"></param>
      <param name="approximateMax"></param>
      <param name="description"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,System.Double,System.Double)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo" /> object.
            </summary>
      <param name="dataType"></param>
      <param name="interpolationType"></param>
      <param name="tag"></param>
      <param name="approximateMin"></param>
      <param name="approximateMax"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.#ctor(ABB.Robotics.RobotStudio.SignalDataType,ABB.Robotics.RobotStudio.SignalInterpolationType,System.String,System.Object,System.Object)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignalInfo" /> object.
            </summary>
      <param name="dataType"></param>
      <param name="interpolationType"></param>
      <param name="tag"></param>
      <param name="approximateMin"></param>
      <param name="approximateMax"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.ApproximateMax">
      <summary>
            Gets or sets the expected maximum value of the signal data.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.ApproximateMin">
      <summary>
            Gets or sets the expected minimum value of the signal data.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.DataType">
      <summary>
            Gets or sets the type of the signal data
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.Description">
      <summary>
            Gets a description of the signal
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.InterpolationType">
      <summary>
            Gets or sets how the signal data should be interpolated
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.Quantity">
      <summary>
            Gets or sets the quantity of the signal data.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSignalInfo.Tag">
      <summary>
            Gets or sets a string that contains data about the signal.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkAddedEventArgs">
      <summary>
            Provides data for the DataRecorderSinkAdded event of the collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkAddedEventArgs.Sink">
      <summary>
            Gets the added sink.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase">
      <summary>
            Base class for a data recorder sink, which will get notified when signals subscribed by the data recorder is updated.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.DataRecorder">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderBase" /> that contains this sink.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.DisplayName">
      <summary>
            Localized display name for the sink
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Enabled">
      <summary>
            Gets or sets if this sink is enabled, e.g. will receive any signal data.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.DataRecorderSinkBase.EnabledChanged">
      <summary>
            Occurs when the Enabled property value has changed.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Equals(System.String)">
      <summary>
            Returns true if this sink has the specified <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Id" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Id">
      <summary>
            A string that uniquely identifies the sink
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.Signals">
      <summary>
            Gets the collection of signals that this sink subscribes to.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkBase.UIVisible">
      <summary>
            Gets or sets a value that indicates if this sink should be visible in a user interface.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase2">
      <summary>
            Base class for a data recorder sink, which will get notified when signals subscribed by the data recorder is updated.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSinkBase" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Add(ABB.Robotics.RobotStudio.DataRecorderSinkBase)">
      <summary>
            Adds a sink to the collection.
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Clear">
      <summary>
            Removes all sinks from the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Contains(ABB.Robotics.RobotStudio.DataRecorderSinkBase)">
      <summary>
            Gets if the collection contains a specific sink.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Contains(System.String)">
      <summary>
            Gets if the collection contains a sink with the specified identifier.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.CopyTo(ABB.Robotics.RobotStudio.DataRecorderSinkBase[],System.Int32)">
      <summary>
            Copies all sinks in the collection to an array.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Count">
      <summary>
            Returns the number of sinks in the collection.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.DataRecorderSinkAdded">
      <summary>
            Occurs when a sink has been added to the collection.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.DataRecorderSinkRemoved">
      <summary>
            Occurs when a sink has been removed from the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Item(System.String)">
      <summary>
            Gets the sink with the specified identifier.
            </summary>
      <param name="id">The identifier of the item to get.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSinkCollection.Remove(ABB.Robotics.RobotStudio.DataRecorderSinkBase)">
      <summary>
            Removes a sink from the collection.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSinkRemovedEventArgs">
      <summary>
            Provides data for the DataRecorderSinkRemoved event of the collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSinkRemovedEventArgs.Sink">
      <summary>
            Gets the removed sink.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceAddedEventArgs">
      <summary>
            Provides data for the DataRecorderSourceAdded event of the collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceAddedEventArgs.Source">
      <summary>
            Gets the added source.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase">
      <summary>
            A data recorder source provides information to a data recorder.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.DataRecorder">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderBase" /> that contains this source.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.DisplayName">
      <summary>
            Localized display name for the source
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceBase.Equals(System.String)">
      <summary>
            Returns true if this source has the specified <see cref="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.Id" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceBase.GetImageKey(System.String)">
      <summary>
            Gets a string that identifies an image that represents this source in a user interface.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceBase.GetSignals">
      <summary>
            Gets a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal" /> objects that this source provides.
            </summary>
      <returns></returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceBase.Id">
      <summary>
            A string that uniquely identifies the source.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceBaseAsync">
      <summary>
            A <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase" /> that supports asynchronous operations for subscribing and unsubscribing signals.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSourceBase" /> objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Add(ABB.Robotics.RobotStudio.DataRecorderSourceBase)">
      <summary>
            Adds a source to the collection.
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Clear">
      <summary>
            Removes all sources from the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Contains(ABB.Robotics.RobotStudio.DataRecorderSourceBase)">
      <summary>
            Gets if the collection contains a specific source.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Contains(System.String)">
      <summary>
            Gets if the collection contains a source with the specified identifier.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.CopyTo(ABB.Robotics.RobotStudio.DataRecorderSourceBase[],System.Int32)">
      <summary>
            Copies all sources in the collection to an array.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Count">
      <summary>
            Returns the number of sources in the collection.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.DataRecorderSourceAdded">
      <summary>
            Occurs when a source has been added to the collection.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.DataRecorderSourceRemoved">
      <summary>
            Occurs when a source has been removed from the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Item(System.String)">
      <summary>
            Gets the source with the specified identifier.
            </summary>
      <param name="id">The identifier of the item to get.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSourceCollection.Remove(ABB.Robotics.RobotStudio.DataRecorderSourceBase)">
      <summary>
            Removes a source from the collection.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSourceRemovedEventArgs">
      <summary>
            Provides data for the DataRecorderSourceRemoved event of the collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSourceRemovedEventArgs.Source">
      <summary>
            Gets the removed source.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult">
      <summary>
            Provides information about the 
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.DataRecorderSignal})">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult" /> class.
            </summary>
      <param name="failedSubscribedSignals"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderSubscribeSignalResult.FailedSubscribedSignals">
      <summary>
            Gets a collection of <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal" /> objects for which subscription to signal data has failed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.DataRecorderBase.Tick" /> event.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs" /> class.
            </summary>
      <param name="time">Time in seconds</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DataRecorderTickEventArgs.Time">
      <summary>
            Gets the current time in seconds.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DocumentHistoryEntry">
      <summary>
            Additional document properties for a specific point in time.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DocumentHistoryEntry.#ctor(System.String,System.String)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.DocumentHistoryEntry" /> object
            </summary>
      <param name="comments"></param>
      <param name="user"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentHistoryEntry.Comments">
      <summary>
            Comments regarding the revision
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentHistoryEntry.Time">
      <summary>
            The time that the document was revised
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentHistoryEntry.User">
      <summary>
            The user that made the revision
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.DocumentInfo">
      <summary>
            This class gives access to document properties such as title, comments, preview etc.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Author">
      <summary>
            Author of the document
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Comments">
      <summary>
            Comments for the document
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DocumentInfo.FromFile(System.String)">
      <summary>
            Creates a read-only DocumentInfo containing the document properties
            for a project file
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.DocumentInfo.FromFileAsync(System.String)">
      <summary>
            Creates a read-only DocumentInfo containing the document properties
            for a project file. This method runs asynchronously.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.History">
      <summary>
            Gets a list of <see cref="T:ABB.Robotics.RobotStudio.DocumentHistoryEntry" /> for the document.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Preview">
      <summary>
            Gets or sets a preview <see cref="T:System.Drawing.Image" /> of the document
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Revision">
      <summary>
            The document revision
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.SaveVersion">
      <summary>
            Returns the product version used to save the document
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Title">
      <summary>
            Title of the document
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.DocumentInfo.Type">
      <summary>
            The type of document
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ExceptionEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.ScreenRecorder.EncoderException" /> event.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ExceptionEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ExceptionEventArgs" /> object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ExceptionEventArgs.Exception">
      <summary>
            Gets or sets the thrown exception
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ExceptionEventHandler">
      <summary>
            Represents a method that will handle the <see cref="E:ABB.Robotics.RobotStudio.ScreenRecorder.EncoderException" /> event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ExceptionLogMessage">
      <summary>
            A log message representing an <see cref="T:System.Exception" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ExceptionLogMessage" /> object.
            </summary>
      <param name="text"></param>
      <param name="ex"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ExceptionLogMessage" /> object.
            </summary>
      <param name="text"></param>
      <param name="category"></param>
      <param name="ex"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ExceptionLogMessage.CanActivate">
      <summary>
            Indicates if this message can be double-clicked to display more information.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.Equals(System.Object)"></member>
    <member name="P:ABB.Robotics.RobotStudio.ExceptionLogMessage.Exception">
      <summary>
            Gets the <see cref="T:System.Exception" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.GetErrorString">
      <summary>
            Returns a string containing the aggregated stack traces and exception messages of the associated exception, and its inner exceptions.
            This method is intended for debugging purposes.
            </summary>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ExceptionLogMessage.GetHashCode"></member>
    <member name="T:ABB.Robotics.RobotStudio.HostedAddInBase">
      <summary>
            Base class for a PowerPac type add-in.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.#ctor">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.HostedAddInBase" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.CanActivate(System.String@)">
      <summary>
            Called by RobotStudio user interface code, to let you tell the user if your PowerPac can be activated or not.
            </summary>
      <param name="reason">If you return false, then specify a reason using this paramter.</param>
      <returns>True if the PowerPac can be activated, false if not.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.CanDeactivate(System.String@)">
      <summary>
            Called by RobotStudio user interface code, to let you tell the user if your PowerPac can be deactivated or not.
            </summary>
      <param name="reason">If you return false, then specify a reason using this paramter.</param>
      <returns>True if the PowerPac can be activated, false if not.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.Deactivate">
      <summary>
            Deactivates the PowerPac and updates RobotStudios internal state about which PowerPac is active.
            This method is typically called by RobotStudio, but might also be called by the PowerPac.
            </summary>
      <returns>True if <b>OnDeactivate</b> returns true or already deactivated. False if <b>OnDeactivate</b> returns false.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.InternalActivate">
      <summary> ABB internal use </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.InternalDeactivate">
      <summary> ABB internal use </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.HostedAddInBase.InternalDeactivated">
      <summary> ABB internal use </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.OnActivate">
      <summary>
            Called when the user has told RobotStudio to activate your PowerPac.
            </summary>
      <returns>True if you have activated the PowerPac, false if you could not activate.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.OnDeactivate">
      <summary>
            Called when the user has told RobotStudio to deactivate your PowerPac.
            </summary>
      <returns>True if you have deactivated the PowerPac, false if not. For example you might want to prevent deactivation if there is unsaved data.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.HostedAddInBase.OnLoad">
      <summary>
            Called when the PowerPac DLL is first loaded into memory by RobotStudio.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.IChange">
      <summary>
            Interface for objects that represent an undoable operation.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.IChange.Redo">
      <summary>
            Redo the operation.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.IChange.Undo">
      <summary>
            Undo the operation.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.IHasSystemId">
      <summary>
            Interface for objects that provide a <b>SystemId</b> property.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.IHasSystemId.SystemId">
      <summary>
            Gets the system id.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.IProgressCallback">
      <summary>
            Callback interface for time-consuming operations.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.IProgressCallback.CancelRequested">
      <summary>
            Gets a value indicating if the client has requested that the operation should be cancelled.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.IProgressCallback.SetProgress(System.Double)">
      <summary>
            Sets the current progress of the operation. The value should be between 0 and 1.
            </summary>
      <param name="progress"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.IProgressCallback.SetState(System.String)">
      <summary>
            Sets a text indicating the current state of the operation.
            </summary>
      <param name="text"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.IProgressCallback.SupportsCancel">
      <summary>
            Sets a value indicating if the operation can be cancelled.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.IProgressCallback.SupportsProgress">
      <summary>
            Sets a value indicating if the SetProgress() callback will be called.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ISupportCopy">
      <summary>
            This interface is implemented by project objects which are possible to copy.
            It is typically used when implementing Copy/Paste functionality.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ISupportCopy.Copy">
      <summary>
            Creates a copy of the project object.
            </summary>
      <returns>The copied project object.</returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LicenseHoldType">
      <summary>
            Specifies how an acquired license is released.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseHoldType.None">
      <summary>
            The license is released immediately.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseHoldType.AllowRelease">
      <summary>
            The license can be released manually.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseHoldType.DenyRelease">
      <summary>
            The license is held until the application exits.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LicenseInformation">
      <summary>
            Contains information about a license
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.ActivationKey">
      <summary> The key used when the license was activated.</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.AvailableLicenses">
      <summary> Number of licens instance available for use </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.ExpirationDate">
      <summary> License end date</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.Features">
      <summary> Feature names </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.IsPermanent">
      <summary> Permanent or time limited license </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.IsTrial">
      <summary> True if this is a trial license </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LicenseInformation.IsValid">
      <summary> Returns true if the license is valid </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.MaxCheckoutTime">
      <summary> Maximum allowed checkout time for floating license </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.StartDate">
      <summary> License start date</summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.State">
      <summary> Describes the state of the license </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.TotalLicenses">
      <summary> Total number of license instances </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.Type">
      <summary> License type </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.VendorInfo">
      <summary> Vendor-defined information </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseInformation.Version">
      <summary> Product version </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LicenseRuntime"></member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseRuntime.SLP"></member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseRuntime.Sentinel"></member>
    <member name="T:ABB.Robotics.RobotStudio.LicenseType">
      <summary>
            Specifies the type of a license
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseType.Standalone">
      <summary>
            Standalone, node-locked license
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LicenseType.Floating">
      <summary>
            Floating, server-based license
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LicenseValidator">
      <summary>
            Manages licenses that unlock licensed features
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.AcquireFeatures(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            ABB internal use.
            </summary>
      <param name="features"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.AcquireLicense(System.String,ABB.Robotics.RobotStudio.LicenseHoldType)">
      <summary>
            Acquires a license for executing a program feature
            </summary>
      <param name="feature">Feature name</param>
      <param name="hold">Specifies when the license is released</param>
      <returns>True on success</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.AcquireLicense(System.String,ABB.Robotics.RobotStudio.LicenseHoldType,System.Boolean,System.Boolean)">
      <summary>
            Acquires a license for executing a program feature
            </summary>
      <param name="feature">Feature name</param>
      <param name="allowLocal">Check standalone/commuter license</param>
      <param name="allowFloating">Check floating license</param>
      <param name="hold">Specifies when the license is released</param>
      <returns>True on success</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.AcquireLicense(System.String,System.String,System.Boolean)">
      <summary>
            Acquires a license for executing a program feature
            </summary>
      <param name="feature">Feature name</param>
      <param name="version">Feature version</param>
      <param name="keep">False to release the license immideately</param>
      <returns>True on success</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.AcquireLicenseToken(System.String)">
      <summary>
            Acquire a license that is held until the returned token is disposed
            </summary>
      <param name="feature">Feature name</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.CheckCadLicense(System.String)">
      <summary>
            ABB Internal use.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LicenseValidator.CurrentVersion">
      <summary>
            Gets the version string required for licenses used by the current product version.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LicenseValidator.Distributor">
      <summary>
            ABB Internal use.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetInstalledLicenses">
      <summary>
            Returns information about all licenses on the client and the server
            </summary>
      <returns />
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetLastError">
      <summary>
            Returns a string describing the cause of failure of the last method call.
            </summary>
      <returns>Error string</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetLicenseInformation(System.String,ABB.Robotics.RobotStudio.LicenseInformation@)">
      <summary>
            Returns information about the license for a specific feature
            </summary>
      <param name="feature">Feature name</param>
      <param name="licenseInformation" />
      <returns>True if the feature was found</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetLicenseInformation(System.String,System.String)"></member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.GetLicenseState(System.String)">
      <summary>
            Returns information about the license state for a specific feature
            </summary>
      <param name="feature">Feature name</param>
      <returns>"Valid" if a valid license exists, empty string or eror message otherwise. </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.Initialize">
      <summary>
            Initializes the <see cref="T:ABB.Robotics.RobotStudio.LicenseValidator" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LicenseValidator.Initialized">
      <summary>
            ABB internal use
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.InstallLicense(System.Byte[],ABB.Robotics.RobotStudio.LicenseInformation@)">
      <summary>
            Installs a license
            </summary>
      <param name="licenseKey">License key to install</param>
      <param name="licenseInformation">Returns information about the installed license</param>
      <returns>True on success</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.InstallLicense(System.Byte[],ABB.Robotics.RobotStudio.LicenseInformation@,System.Boolean)">
      <summary>
            Installs a license
            </summary>
      <param name="licenseKey">License key to install</param>
      <param name="licenseInformation">Returns information about the installed license</param>
      <param name="checkOverwrite">Causes the method to fail if installing a commercial license would
            cause valid non-commercial licenses to be removed.</param>
      <returns>True on success</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.IsValidLicenseAvailable(System.String)">
      <summary>
            Checks if there is a valid license available for a feature,
            but does not perform a full validation.
            </summary>
      <param name="feature"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.ReleaseLicense(System.String)">
      <summary>
            Releases an license acquired with keep = true
            </summary>
      <param name="feature">Feature name</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.ReleaseLicense(System.String,System.String)"></member>
    <member name="P:ABB.Robotics.RobotStudio.LicenseValidator.Runtime"></member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.Shutdown">
      <summary>
            Shuts down the LicenseValidator, releasing any held licenses.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LicenseValidator.UninstallLicense(System.String)">
      <summary>
            Uninstalls the license with the specified activation key.
            </summary>
      <param name="activationKey"></param>
      <returns></returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LoadContext">
      <summary>
            Identifies the context (document) of a loaded <see cref="T:ABB.Robotics.RobotStudio.CustomProjectObject" /></summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Logger">
      <summary>
            Provides methods and events to support logging of messages to the user.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.ActivateMessage(ABB.Robotics.RobotStudio.LogMessage)">
      <summary>
            Fires the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageActivated" /> event.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.ActivateMessage(System.Object,ABB.Robotics.RobotStudio.LogMessage)">
      <summary>
            Fires the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageActivated" /> event and shows more details if the <see cref="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Handled" /> is not True and the <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> is of base class type.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(ABB.Robotics.RobotStudio.LogMessage)">
      <summary>
            Adds a log message to the logger.
            </summary>
      <param name="msg">The <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> to add. </param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(ABB.Robotics.RobotStudio.LogMessage,System.Boolean)">
      <summary>
            Adds a log message to the logger.
            </summary>
      <param name="msg">The <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> to add.</param>
      <param name="bringToFront">Indicates whether the output window should be brought to the foreground then the message is added.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(System.String)">
      <summary>
            Adds an information log message to the logger.
            </summary>
      <param name="message">The message to add.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.AddMessage(System.String,System.Boolean)">
      <summary>
            Adds an information log message to the logger.
            </summary>
      <param name="message">The message to add.</param>
      <param name="bringToFront">Indicates whether the output window should be brought to the foreground then the message is added.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Logger.CategoryCaptions">
      <summary>
            Key-value pairs for translating category ids to (localized) texts.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.Clear">
      <summary>
            Clears the logger. All messages are removed.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.Clear(System.String)">
      <summary>
            Removes all log messages with the specified category.
            </summary>
      <param name="category"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.GetMessages">
      <summary>
            Returns an all log messages in the logger.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.GetMessages(System.String)">
      <summary>
            Returns all log messages with the specified category.
            </summary>
      <param name="category"></param>
      <returns></returns>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Logger.LogMessageActivated"></member>
    <member name="E:ABB.Robotics.RobotStudio.Logger.LogMessageAdded">
      <summary>
            Raised when a message is removed.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Logger.LogMessageRemoved">
      <summary>
            Raised when a message is added.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Logger.MessageActivated">
      <summary>
            Raised when a message is activated, e.g. double-clicked in the GUI.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Logger.RemoveMessage(ABB.Robotics.RobotStudio.LogMessage)">
      <summary>
            Removes a log message from the logger.
            </summary>
      <param name="msg">The <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> to remove. </param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessage">
      <summary>
            Represents a log message that can be added to the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> class with the specified message text.
            </summary>
      <param name="text">The message text.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,ABB.Robotics.RobotStudio.LogMessageSeverity)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> class with the specified message text and severity.
            </summary>
      <param name="text">The message text.</param>
      <param name="severity">The severity of the message.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> class with the specified message text and category.
            </summary>
      <param name="text">The message text.</param>
      <param name="category">The message category.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> class with the specified message text, category and severity.
            </summary>
      <param name="text">The message text.</param>
      <param name="category">The message category.</param>
      <param name="severity">The severity of the message.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> class with the specified message text, detailed text, category, severity and help topic.
            </summary>
      <param name="text">The message text.</param>
      <param name="category">The message category.</param>
      <param name="severity">The severity of the message.</param>
      <param name="helpTopic">The helpt topic.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.LogMessage" /> class with the specified message text, category and severity.
            </summary>
      <param name="text">The message text.</param>
      <param name="category">The message category.</param>
      <param name="detailedText">A more detaild version of the message text.</param>
      <param name="severity">The severity of the message.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.#ctor(System.String,System.String,System.String,ABB.Robotics.RobotStudio.LogMessageSeverity,System.String)">
      <summary>
            This constructor is for internal use only.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.CanActivate">
      <summary>
            Indicates if this message can be double-clicked to display more information.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.Category">
      <summary>
            Gets the message category. This property is used to categorize log messages which is related to each other.
            A PowerPack for example, could define its own category for all messages that it logs.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.DetailedText">
      <summary>
            A more detailed description that if set to anything will be shown in a dialog when the message is activated.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.Equals(System.Object)">
      <summary>
            Indicates whether the current object is equal to another object
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessage.GetHashCode">
      <summary>
            Returns the hash code for this object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.HelpTopic">
      <summary>
            This property is for internal use only.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.SequenceNumber">
      <summary>
            Gets the sequence number of the message severity of the message.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.Severity">
      <summary>
            Gets the severity of the message. The severity is specified by the <see cref="T:ABB.Robotics.RobotStudio.LogMessageSeverity" /> enumerator.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.Text">
      <summary>
            Gets the message text.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessage.TimeStamp">
      <summary>
            Gets the date and time when the message was logged.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageActivated" /> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.#ctor(ABB.Robotics.RobotStudio.LogMessage)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs" /> object.
            </summary>
      <param name="message"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Handled">
      <summary>
            If no event handler sets this to True RobotStudio will handle activation with default implementation.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessageActivatedEventArgs.Message">
      <summary>
            The message that has been activated.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessageActivatedEventHandler">
      <summary>
            Represents a method that will handle activated log messages.
            </summary>
      <param name="sender">The object where the event was invoked.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageAdded" /> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs.BringToFront">
      <summary>
            Indicates whether the output window should be brought to the foreground then the message is added.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs.Message">
      <summary>
            Gets the added message.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessageAddedEventHandler">
      <summary>
            Represents the method that will handle the <b>LogMessageAdded</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" /> class.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.LogMessageAddedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessageRemovedEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Logger.LogMessageRemoved" /> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.LogMessageRemovedEventArgs.Message">
      <summary>
            Gets the removed message.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessageRemovedEventHandler">
      <summary>
            Represents the method that will handle the <b>LogMessageRemoved</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Logger" /> class.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.LogMessageRemovedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.LogMessageSeverity">
      <summary>
            Specifies the severity of a log message.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LogMessageSeverity.Information">
      <summary>
            An informational message.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LogMessageSeverity.Warning">
      <summary>
            A warning message.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.LogMessageSeverity.Error">
      <summary>
            An error message.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.MeasuringUnit">
      <summary>
            Represents a measuring unit such as meter, millimeter, m/s, rad/s2.
            A unit belongs to a quantity. For example meter and millimeter belongs
            to the quantity length, and m/s belongs to the quantity velocity.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.#ctor(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the MeasuringUnit class.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.BuiltIn">
      <summary>
            Gets a value indicating whether the MeasuringUnit is built in.
            A builtin measuringunit cannot be removed from a Quantity.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertFromSI(System.Double)">
      <summary>
            Converts a value from SI unit to the unit represented by the MeasuringUnit.
            </summary>
      <param name="value">The value to convert from SI unit.</param>
      <returns>
            The value converted to the unit represented by the MeasuringUnit.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertFromSIToDisplayString(System.Double)">
      <summary>
            Converts a value expressed in SI unit to a string that can be displayed in a user interface.
            the number of decimlas specified by the MeasuringUnit is used.
            </summary>
      <param name="value">The SI value to convert to a display string.</param>
      <returns>
            The display string.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertFromSIToDisplayString(System.Double,System.Int32)">
      <summary>
            Converts a value expressed in SI unit to a string that can be displayed in a user interface.
            the number of decimals specified by the MeasuringUnit is used.
            </summary>
      <param name="value">The SI value to convert to a display string.</param>
      <param name="numDecimals">The number of decimals to use</param>
      <returns>
            The display string.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertToSI(System.Double)">
      <summary>
            Converts a value expressed in the unit represented by the MeasuringUnit
            to a value expressed in the corresponding SI unit.
            </summary>
      <param name="value">The value to convert to SI unit.</param>
      <returns>
            The value in SI unit.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ConvertToSIFromDisplayString(System.String)">
      <summary>
            Converts a value expressed in SI unit to a string that can be displayed in a user interface.
            The number of decimlas to use can be specified.
            </summary>
      <param name="displayString">The SI value to convert to a display string.</param>
      <returns>
            The display string.
            </returns>
      <exception cref="T:System.ArgumentException">
            The argument is not valid.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.DisplayDecimals">
      <summary>
            Gets or sets the number of decimals to display when a numeric value
            of the measuring unit shall be displayed as text in a user interface.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.DisplayName">
      <summary>
            Gets the display name of the measuring unit. This name is localized and depends on current locale.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.EditDecimals">
      <summary>
            Gets or sets the number of decimals to display when a numeric value
            of the measuring unit is edited.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.IsValidDisplayCharacter(System.Char)">
      <summary>
            Returns a value indicating whether the specified character is valid
            in the string representation the MeasuringUnit.
            </summary>
      <param name="displayCharacter">The character to test for validity.</param>
      <returns>
            A value indicating whether the specified character is valid.
            </returns>
      <exception cref="T:System.ArgumentException">
            The argument is not valid.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.IsValidDisplayString(System.String)">
      <summary>
            Returns a value indicating whether the specified string is a valid string representation of the MeasuringUnit.
            </summary>
      <param name="displayString">The character to test for validity.</param>
      <returns>
            A value indicating whether specified string is a valid string representation of the MeasuringUnit.
            </returns>
      <exception cref="T:System.ArgumentException">
            The argument is not valid.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnit.Name">
      <summary>
            Gets the name of the measuring unit.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnit.ToString"></member>
    <member name="T:ABB.Robotics.RobotStudio.MeasuringUnitCollection">
      <summary>
            Represents a collection of measuring units.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Add(ABB.Robotics.RobotStudio.MeasuringUnit)">
      <summary>
            Adds a MeasuringUnit object to the MeasuringUnitCollection object.
            </summary>
      <param name="unit">The unit to be added.</param>
      <exception cref="T:System.InvalidOperationException">
            The unit has already been added to the collection.</exception>
      <exception cref="T:System.ArgumentException">
            The argument is not valid.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.CopyTo(ABB.Robotics.RobotStudio.MeasuringUnit[],System.Int32)">
      <summary>
            Copies all items in the collection to an array.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies all items in the collection to an array.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Count">
      <summary>
            Gets the number of items in the MeasuringUnitCollection object.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can be used to iterate over the MeasuringUnitCollection object.
            </summary>
      <returns>
            An IEnumerator object that represents the MeasuringUnitCollection object.
            </returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.MeasuringUnitCollection" /> is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Item(System.Int32)">
      <summary>
            Gets the item at the specified identifier.
            </summary>
      <param name="index">The unique identifier of the item to get.</param>
      <exception cref="T:System.ArgumentException">
            The identifier value is not valid.
            </exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Item(System.String)">
      <summary>
            Gets the item with the specified name.
            </summary>
      <param name="name">The name the item to get.</param>
      <exception cref="T:System.ArgumentException">
            A unit with the specified name does not exists in the collection.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.Remove(ABB.Robotics.RobotStudio.MeasuringUnit)">
      <summary>
            Remove a MeasuringUnit object from the MeasuringUnitCollection object.
            </summary>
      <param name="unit">The unit to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
            The argument is not valid or the unit is builtin.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The unit is built in or has not been added to the collection.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.MeasuringUnitCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.MeasuringUnitCollection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.MeasuringUnitCollection.ToArray">
      <summary>
            Copies the MeasuringUnitCollection elements to a new array.
            </summary>
      <returns>
            A new array containing elements copied from the MeasuringUnitCollection
            </returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Options">
      <summary>
            Provides static methods, properties and events to store and read user options. Options are grouped in sections.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.#ctor"></member>
    <member name="E:ABB.Robotics.RobotStudio.Options.Changed">
      <summary>
            Fired when a change of options has occured.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.GetDefaultValue(System.String,System.String)">
      <summary>
            Gets the default value for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which to get the default value.</param>
      <param name="key">The key of the option for which to get the default value.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.GetKeys(System.String)">
      <summary>
            Gets an array of all option keys in the specified section.
            </summary>
      <returns>
            An array of strings with the names of the option sections.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.GetSections">
      <summary>
            Gets an array of all options sections.
            </summary>
      <returns>
            An array of strings with the names of the options sections.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.GetValue(System.String,System.String)">
      <summary>
            Gets the value for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which to get the value.</param>
      <param name="key">The key of the option from which to get the value.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Options.Language">
      <summary>
            Gets or sets the application language as an IETF language tag (e.g. "en-US").
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.Load(System.String)">
      <summary>
            Load options from an XML file.
            </summary>
      <param name="fileName">The name of the XML file to load.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.Reload">
      <summary>
            Reloads options from disk
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.RemoveKey(System.String,System.String)">
      <summary>
            Removes an option with the specified key from the specified section.
            </summary>
      <param name="section">The options section which contains the option that shall be removed.</param>
      <param name="key">The key of the option to remove.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.RemoveSection(System.String)">
      <summary>
            Removes an entire section. Use with care!
            </summary>
      <param name="section"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Options.RestartRequired">
      <summary>
            Gets or sets a value indicating if the application needs to be restart for changed options to apply.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.Save">
      <summary>
            Commits all options to disk.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SaveAs(System.String)">
      <summary>
            Save options to an XML file.
            </summary>
      <param name="fileName">The name of the XML file where options will be saved.</param>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Options.SectionChanged">
      <summary> Occurs when the specified section has called. </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Boolean)">
      <summary>
            Sets a default boolean value of for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Double)">
      <summary>
            Sets a default double value of for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Drawing.Color)">
      <summary>
            Sets a default <see cref="T:System.Drawing.Color" /> value of for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Int32)">
      <summary>
            Sets a default integer value of for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Int64)">
      <summary>
            Sets a default 64-bit integer value of for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.Single)">
      <summary>
            Sets a default float value of for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.String)">
      <summary>
            Sets a default string value of for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetDefaultValue(System.String,System.String,System.String[])">
      <summary>
            Sets a default string array value for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which the default value shall be set.</param>
      <param name="key">The key of the option for which the default value shall be set.</param>
      <param name="value">The default value of the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetFileName(System.String)">
      <summary>
            Sets an alternative filename for the options file.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Boolean)">
      <summary>
            Sets a boolean value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The boolean to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Double)">
      <summary>
            Sets a double value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The double to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Drawing.Color)">
      <summary>
            Sets a <see cref="T:System.Drawing.Color" /> value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The integer to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Int32)">
      <summary>
            Sets an integer value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The integer to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Int64)">
      <summary>
            Sets an 64-bit integer value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The integer to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.Single)">
      <summary>
            Sets a float value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The float to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.String)">
      <summary>
            Sets a string value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The string to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.SetValue(System.String,System.String,System.String[])">
      <summary>
            Sets an string array value for an option with the specified key.
            </summary>
      <param name="section">The options section in which to set a value.</param>
      <param name="key">The key of the option.</param>
      <param name="value">The array of strings to use as value for the option.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.TryGetDefaultValue``1(System.String,System.String,``0@)">
      <summary>
            Gets the typed default value for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which to get the default value.</param>
      <param name="key">The key of the option from which to get the default value.</param>
      <param name="value">The default value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
      <typeparam name="T">The expected type of the value.</typeparam>
      <returns>True if the default value was found and of the specified type, false otherwise.</returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Options.TryGetValue``1(System.String,System.String,``0@)">
      <summary>
            Gets the typed value for an option with the specified key.
            </summary>
      <param name="section">The options section which contains the option for which to get the value.</param>
      <param name="key">The key of the option from which to get the value.</param>
      <param name="value">The value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
      <typeparam name="T">The expected type of the value.</typeparam>
      <returns>True if the option was found and of the specified type, false otherwise.</returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProgressNotification">
      <summary>
            Represents the method that will handle progress notification callbacks.
            Some time consuming methods provides a progress notification callback, and accepts this delegate as an argument.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Project">
      <summary>
            Base class for all project types. Available project types will differ depending
            on the product that this API is used within.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.ActiveProject">
      <summary>
            Gets the project that is currently active.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.ActiveProjectChanged">
      <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Project.ActiveProject" /> property has changed.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Project.AutoSave">
      <summary>
            Saves any pending changes to the auto-save stream in the <see cref="T:ABB.Robotics.RobotStudio.Project" /> file.
            </summary>
      <returns>
            True if the changes were saved.
            False if there were no changes, or if the project was opened as read-only.
            </returns>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.AutoSaveAvailable">
      <summary>
            Occurs if autosave data is available for a <see cref="T:ABB.Robotics.RobotStudio.Project" /> being loaded.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.BeforeLoadProjectFile">
      <summary>
            Occurs before a <see cref="T:ABB.Robotics.RobotStudio.Project" /> is loaded from file.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Project.Close">
      <summary>
            Closes the project without saving changes.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.Closed">
      <summary>
            Occurs after a <see cref="T:ABB.Robotics.RobotStudio.Project" /> is closed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.DocumentInfo">
      <summary>
            Gets an object which contains properties about the project file
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.FileInfo">
      <summary>
            Gets information about the file where the project is stored.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Project.FromFileName(System.String)">
      <summary>
            Returns the Project with the given file name if it already is loaded,
            otherwise null.
            </summary>
      <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Project" /> if already loaded, otherwise null.&gt;
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Project.GetObjectFromUniqueId(System.String)">
      <summary>
            Finds an object in the <see cref="T:ABB.Robotics.RobotStudio.Project" /> by its <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.UniqueId" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.IsDirty">
      <summary>
            Determines if the project has unsaved changes.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.OpenProjects">
      <summary>
            Gets a collection of all currently open <see cref="T:ABB.Robotics.RobotStudio.Project" />s.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.ProjectAdded">
      <summary>
            Occurs when a <see cref="T:ABB.Robotics.RobotStudio.Project" /> is loaded or created.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.ProjectFileLocked">
      <summary>
            Occurs if a <see cref="T:ABB.Robotics.RobotStudio.Project" /> file being loaded in read-write mode cannot be opened for writing.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.ProjectObjectRemoved">
      <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Project.ContainingProject" /> property has changed to null.
            This will occur when an <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> object is removed from a <see cref="T:ABB.Robotics.RobotStudio.Project" /> project.
            For example when an object removed from its owning collection.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.ProjectRemoved">
      <summary>
            Occurs when a <see cref="T:ABB.Robotics.RobotStudio.Project" /> is closed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.ReadOnly">
      <summary>
            Gets or sets a value indicating if the corresponding project file is readonly or in use.
            If the value is true it is not possible to call Save().
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.ReferencedProjectFileNotFound">
      <summary>
            Occurs when a file referenced by a <see cref="T:ABB.Robotics.RobotStudio.Project" /> being loaded is not found in the expected location.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.ReferencedProjectFileNotSame">
      <summary>
            Occurs when a file referenced by a <see cref="T:ABB.Robotics.RobotStudio.Project" /> being loaded is not the same as when the project was saved.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Project.Save">
      <summary>
            Saves the project to its corresponding project file.
            </summary>
      <exception cref="T:System.Exception">
            The project has not been saved before, so there is no corresponding project file.
            You must call <see cref="M:ABB.Robotics.RobotStudio.Project.SaveAs(System.String)" /> before you can call save.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Project.SaveAs(System.String)">
      <summary>
            Saves the project to a project file on a new location.
            </summary>
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.IO.DirectoryNotFoundException" />
      <exception cref="T:System.IO.FileNotFoundException" />
      <exception cref="T:System.UnauthorizedAccessException" />
      <exception cref="T:System.IO.IOException" />
      <exception cref="T:System.ArgumentException">
            The specified file name is invalid.
            </exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Project.SaveCopyAs(System.String)">
      <summary>
            Saves a copy of the project file.
            </summary>
      <exception cref="T:System.ArgumentException">
            The specified file name is invalid.
            </exception>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.Saved">
      <summary>
            Occurs after a <see cref="T:ABB.Robotics.RobotStudio.Project" /> has been saved to file.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Project.Saving">
      <summary>
            Occurs before a <see cref="T:ABB.Robotics.RobotStudio.Project" /> is saved to file.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.Selection">
      <summary>
            This property is obsolete. Use <see cref="P:ABB.Robotics.RobotStudio.Selection.SelectedObjects" /> instead.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Project.UndoContext">
      <summary>
            Gets an object giving access to the undo system for the project. which gives information about selected objects and makes it possible to select objects.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectDocument">
      <summary>
            Represents a document associated with a project.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.#ctor(System.String,ABB.Robotics.RobotStudio.ProjectDocumentType)">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /></summary>
      <param name="url">Document URL</param>
      <param name="type">Document type</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.#ctor(System.String,ABB.Robotics.RobotStudio.ProjectDocumentType,ABB.Robotics.RobotStudio.ProjectDocumentFlags)">
      <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /></summary>
      <param name="url">Document URL</param>
      <param name="type">Document type</param>
      <param name="flags">Document flags</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.#ctor(System.String,System.Byte[])">
      <summary>
            Creates a new embedded <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /> from binary data.
            </summary>
      <param name="data">Document name</param>
      <param name="name">Document data</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Available">
      <summary>
            Returns true if the document can be accessed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Comment">
      <summary>
            Gets or sets a comment for the document.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Flags">
      <summary>
            Gets or sets the document flags.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.GetData">
      <summary>
            Gets the binary data of an embedded document.
            </summary>
      <returns></returns>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.LastChange">
      <summary>
            Gets the last time the document was modified.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocument.SetData(System.Byte[])">
      <summary>
            Sets the binary data of an embedded document.
            </summary>
      <param name="data"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Size">
      <summary>
            Gets the size (in bytes) of this document.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Type">
      <summary>
            Gets the type of document.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocument.Url">
      <summary>
            Gets or sets the URL of the document.
            For a file or folder reference, this is a file system path.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectDocumentCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" />s.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Add(ABB.Robotics.RobotStudio.ProjectDocument)">
      <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /> to the collection.
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Clear">
      <summary>
            Removes all <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" />s from the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Contains(ABB.Robotics.RobotStudio.ProjectDocument)">
      <summary>
            Determines whether collection contains a specific <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" />.
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.CopyTo(ABB.Robotics.RobotStudio.ProjectDocument[],System.Int32)">
      <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.IndexOf(ABB.Robotics.RobotStudio.ProjectDocument)">
      <summary>
            Determines the index of a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /> in the list.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Insert(System.Int32,ABB.Robotics.RobotStudio.ProjectDocument)">
      <summary>
            Inserts a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /> at the specified index.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /> at the spcified index.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Parent">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> that contains this collection, typically a <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectDocumentCollection.Remove(ABB.Robotics.RobotStudio.ProjectDocument)">
      <summary>
            Removes a specific <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /> from the collection.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectDocumentFlags">
      <summary>
            Specifies values for the <see cref="P:ABB.Robotics.RobotStudio.ProjectDocument.Flags" /> property.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.None">
      <summary>
            The default.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.Locked">
      <summary>
            Indicates that the document cannot be modified, saved or deleted in the GUI.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.IncludeInPackAndGo">
      <summary>
            Indicates that the file or folder should be included in Pack and Go.
            The path must be relative to the parent folder of the project file.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentFlags.PackRecursive">
      <summary>
            Indicates that subfolders are included in Pack and Go.
            Valid only for folder references.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectDocumentType">
      <summary>
            Specifies the type of a <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument" /></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentType.FileReference">
      <summary>
            The document represents a file on disk.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentType.FolderReference">
      <summary>
            The document represents a folder on disk.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectDocumentType.EmbeddedFile">
      <summary>
            The document is embedded in the station file.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectFileEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Project.BeforeLoadProjectFile" /> event.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectFileEventArgs.FileName">
      <summary>
            Gets the path to the file that is being loaded.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectFileEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Project.BeforeLoadProjectFile" /> event.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs">
      <summary>
            Provides data for the <see cref="!:Project::ProjectFileLocked" /> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs.Cancel">
      <summary>
            Gets or sets if the operation causing the event shall be canceled.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs.FileName">
      <summary>
            Gets the name of the locked project file.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectFileLockedEventArgs.UserName">
      <summary>
            Gets the name of the user who owns the process that has locked the file.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectFileLockedEventHandler">
      <summary>
            Represents the method that will handle the <b>ProjectFileLocked</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObject">
      <summary>
            Abstract base class for all objects that can be part of a Project. It can not be instantiated.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Attributes">
      <summary>
            Returns a collection of dynamic attributes attached to the object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Children">
      <summary>
            Enumerates all child objects. 
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.ContainingProject">
      <summary>
            Returns the Project that this object is a part of, or null if it is
            not part of a Project.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.DisplayName">
      <summary>
            Gets the name of the the object that should be displayed in the GUI.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.ProjectObject.DisplayNameChanged"></member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObject.FindObjects(System.Predicate{ABB.Robotics.RobotStudio.ProjectObject},System.Predicate{ABB.Robotics.RobotStudio.ProjectObject})">
      <summary>
            Recursively finds object that satisfy a condition.
            </summary>
      <param name="filter">Return true if the object should be returned.</param>
      <param name="recurse">Return true if the recursion should continue.</param>
      <returns></returns>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.ProjectObject.InternalEvent">
      <summary>
            ABB Internal use
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Name">
      <summary>
            Gets or sets the name of the object
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.Parent">
      <summary>
            Returns the objects parent, if it has one.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.ProjectObject.ProjectObjectChanged">
      <summary>
            Occurs when the ProjectObject is changed
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObject.ToString"></member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.TypeDisplayName">
      <summary>
            Gets a localized name for the type of this object.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.UIVisible">
      <summary>
            Gets or sets a value that indicates if this object should be displayed in GUI
            such as an object browser.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObject.UniqueId">
      <summary>
            Gets a persisted, globally unique identifier for this object, that can be used
            to find the object using the <see cref="M:ABB.Robotics.RobotStudio.Project.GetObjectFromUniqueId(System.String)" /> method.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.ProjectObject.ProjectObjectChanged" /> event.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs.ChangedObject">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> that has changed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs.ChangeType">
      <summary>
            Gets the type of change.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs.Equals(System.Object)"></member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs.GetHashCode"></member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectChangedEventHandler">
      <summary>
            Represents the method that will handle the <b>ProjectObjectChanged</b>event of a <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectChangeType">
      <summary>
            Specifies in which way a project object has changed.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Children">
      <summary>
            Child objects have been added or removed.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Parent">
      <summary>
            The Parent of the object has changed.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Transform">
      <summary>
            The object position and/or orientation has changed.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Name">
      <summary>
            The name of the object has changed.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Other">
      <summary>
            Any other object property has changed.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.Any"></member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.UndoRedo">
      <summary>
            Previous changes have been undone or redone.
            Any property might be affected.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectObjectChangeType.UIVisible">
      <summary>
            The UIVisible property has changed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectCollection">
      <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />s
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.#ctor">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectCollection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.Add(ABB.Robotics.RobotStudio.ProjectObject)">
      <summary>
            Appends a <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> to the collection.
            </summary>
      <param name="projectObject">The <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> object to append to this collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.Contains(ABB.Robotics.RobotStudio.ProjectObject)">
      <summary>
            Determines whether the collection contains a specific <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies all of the <b>ProjectObjects</b> in this collection to the specified array, starting at the specified index of the target array.
            </summary>
      <param name="targetArray">The array of <cee cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> that recieves the elements of the collection.</param>
      <param name="index">The zero-based index in the target array where this method starts copying this collection.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectCollection" /> is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> at the specified index.
            </summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.Remove(ABB.Robotics.RobotStudio.ProjectObject)">
      <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" /> from the collection.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectCollection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectObjectCollection.ToArray"></member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs">
      <summary>
            Provides data for events of type <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventHandler" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs.NewValue">
      <summary>
            Gets the new property value.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs.OldValue">
      <summary>
            Gets the old property value.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.ProjectObjectPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs">
      <summary>
            Provides data for the <see cref="!:ABB::Robotics::RobotStudio::Project::ProjectObjectRemoved" /> event of the <see cref="P:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs.Project" />.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs.Project">
      <summary>
            Gets the <b>Project</b> from which to object was removed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventArgs.RemovedObject">
      <summary>
            Gets the object that has been removed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectObjectRemovedEventHandler">
      <summary>
            Represents the method that will handle the <b>ProjectObjectRemoved</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectSelection">
      <summary>
            Represents a collection of all selected objects in a project.
            Selection is a concept used from the user interface. Typically it is used to specify for which objects to perform 
            an action, to view information for specific objects and to show which operations that are availble for specific objects.
            The most common way for a user to select an object is to click with the mouse in the graphic view or in a browser.
            Using this object you can programatically control which objects that are selected and get notified when selection has changed.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Add(System.Object)">
      <summary>
            Adds an object to the Project's selection
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to add to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> object.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Add(System.Object,ABB.Robotics.RobotStudio.SelectionReason)">
      <summary>
            Adds an object to the Project's selection, also specifying why the object was selected
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Adds a range of objects to the Project's selection
            </summary>
      <param name="selections">The <see cref="T:System.Collections.IEnumerator" /> to add to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> objects.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Clear">
      <summary>
            Clears the Project's selection
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Contains(System.Object)">
      <summary>
            Determines whether the object is currently selected.
            </summary>
      <param name="obj">The object to locate in the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> object.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies all of the objects in this collection to the specified array, starting at the specified index of the target array.
            </summary>
      <param name="targetArray">The array of <cee cref="T:System.Object" /> that recieves the elements of the collection.</param>
      <param name="index">The zero-based index in the target array where this method starts copying this collection.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.CopyTo(System.Object[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> to an array, starting at a particular array index.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.Count">
      <summary>
            Gets the number of elements in the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.GetTypes">
      <summary>
            Returns an array containing the types of all selected objects.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> is synchronized (thread safe).
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectAdded">
      <summary>
            Occurs when an object has been added to the collection of selected objects.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectRemoved">
      <summary>
            Occurs when an object has been removed from the collection of selected objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.Remove(System.Object)">
      <summary>
            Removes an object from the Project's selection
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to remove from the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" /> object.</param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.SingleSelectedObject">
      <summary>
            If a single object is selected, that object is returned, otherwise null.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ProjectSelection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ProjectSelection.ToArray">
      <summary>
            Returns an array containing all selected objects.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ProjectType">
      <summary>
            Specifies the type of a <see cref="T:ABB.Robotics.RobotStudio.Project" /></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectType.Station">
      <summary>
            The project is a <b>Station</b></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectType.Library">
      <summary>
            The project is a <b>GraphicComponentLibrary</b></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ProjectType.Unknown">
      <summary>
            The project type is unknown
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity">
      <summary>
            Represents a SI quantity such as length, time, area etc.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Acceleration">
      <summary>
            Gets the builtin quantity representing acceleration.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.ActiveMeasuringUnit">
      <summary>
            Gets or sets the MeasuringUnit that is currently active on this Quantity.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Quantity.ActiveMeasuringUnitChanged">
      <summary>
            Occurs when the active measuring unit of this quantity has changed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Angle">
      <summary>
            Gets the builtin Quantity Angle.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.AngularAcceleration">
      <summary>
            Gets the builtin quantity representing angular acceleration.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.AngularVelocity">
      <summary>
            Gets the builtin quantity representing angular velocity.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Area">
      <summary>
            Gets the builtin quantity representing area.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.DisplayName">
      <summary>
            Gets the identifier string of the Quantity.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Energy">
      <summary>
            Gets the builtin quantity representing energy.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Quantity.GetBuiltinQuantity(ABB.Robotics.RobotStudio.BuiltinQuantity)">
      <summary>
            Returns the Quantity corresponding to an element of the BuiltinQuantity enumeration.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Inertia">
      <summary>
            Gets the builtin quantity representing inertia.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Length">
      <summary>
            Gets the builtin Quantity Length.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Mass">
      <summary>
            Gets the builtin quantity representing mass.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.MeasuringUnits">
      <summary>
            Gets a MeasuringUnitCollection object that represents all the measuring units that
            belongs to this Quantity.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Name">
      <summary>
            Gets the identifier string of the Quantity.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.None">
      <summary>
            Gets the builtin Quantity None.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Power">
      <summary>
            Gets the builtin quantity representing power.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Time">
      <summary>
            Gets the builtin Quantity Time.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Quantity.ToString"></member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Velocity">
      <summary>
            Gets the builtin quantity representing velocity.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Quantity.Volume">
      <summary>
            Gets the builtin quantity representing volume.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit">
      <summary>
            Specifies a unit of the quantity Acceleration
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.MeterPerSecond2">
      <summary>
            Meters per second squared
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.MillimeterPerSecond2">
      <summary>
            Millimeters per second squared
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.InchPerSecond2">
      <summary>
            Inches per second squared
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AccelerationUnit.FeetPerSecond2">
      <summary>
            Feet per second squared
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.AngleUnit">
      <summary>
            Specifies a unit of the quantity Angle
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AngleUnit.Degree">
      <summary>
            Degrees
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AngleUnit.Radian">
      <summary>
            Radians
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.AngularAccelerationUnit">
      <summary>
            Specifies a unit of the quantity AngularAcceleration
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularAccelerationUnit.DegreePerSecond2">
      <summary>
            Degrees per second squared
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularAccelerationUnit.RadianPerSecond2">
      <summary>
            Radians per second squared
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.AngularVelocityUnit">
      <summary>
            Specifies a unit of the quantity AngularVelocity
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularVelocityUnit.DegreePerSecond">
      <summary>
            Degrees per second
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AngularVelocityUnit.RadianPerSecond">
      <summary>
            Radians per second
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.AreaUnit">
      <summary>
            Specifies a unit of the quantity Area
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Meter2">
      <summary>
            Square meters
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Millimeter2">
      <summary>
            Square millimeters
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Inch2">
      <summary>
            Square inches
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.AreaUnit.Feet2">
      <summary>
            Square feet
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.EnergyUnit">
      <summary>
            Specifies a unit of the quantity Energy
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.EnergyUnit.Joule">
      <summary>
            Joules
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.InertiaUnit">
      <summary>
            Specifies a unit of the quantity Inertia
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.InertiaUnit.Kgmeter2">
      <summary>
            Kilograms per meter squared
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.LengthUnit">
      <summary>
            Specifies a unit of the quantity Length
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Meter">
      <summary>
            Meters
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Millimeter">
      <summary>
            Millimeters
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Inch">
      <summary>
            Inches
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.LengthUnit.Feet">
      <summary>
            Feet
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.MassUnit">
      <summary>
            Specifies a unit of the quantity Mass
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.MassUnit.Kg">
      <summary>
            Kilograms
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.NoneUnit">
      <summary>
            Specifies a unit of the quantity None
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.NoneUnit.None">
      <summary>
            No unit
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.PowerUnit">
      <summary>
            Specifies a unit of the quantity Power
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.PowerUnit.Watt">
      <summary>
            Watts
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.TimeUnit">
      <summary>
            Specifies a unit of the quantity Time
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.TimeUnit.Second">
      <summary>
            Seconds
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.VelocityUnit">
      <summary>
            Specifies a unit of the quantity Velocity
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.MeterPerSecond">
      <summary>
            Meters per second
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.MillimeterPerSecond">
      <summary>
            Millimeters per second
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.InchPerSecond">
      <summary>
            Inches per second
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VelocityUnit.FeetPerSecond">
      <summary>
            Feet per second
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Quantity.VolumeUnit">
      <summary>
            Specifies a unit of the quantity Volume
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Meter3">
      <summary>
            Cubic meters
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Millimeter3">
      <summary>
            Cubic millimeters
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Inch3">
      <summary>
            Cubic inches
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.Quantity.VolumeUnit.Feet3">
      <summary>
            Cubic feet
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.RecorderState">
      <summary>
            Specifies the different states that the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder" /> can be in.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.RecorderState.Recording">
      <summary>
            The recorder is recording.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.RecorderState.Paused">
      <summary>
            The recording is paused.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.RecorderState.Stopped">
      <summary>
            The recorder is not running.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs">
      <summary>
            Provides data for the <see cref="!:Project::ReferencedProjectFileNotFound" /> event
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.#ctor(ABB.Robotics.RobotStudio.ProjectType,System.String)">
      <summary>
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs" /> object.
            </summary>
      <param name="containingType"></param>
      <param name="fileName"></param>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.Cancel">
      <summary>
            Gets or sets a value that indicates if the load (of the referencing project) should be canceled.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.ContainingProjectType">
      <summary>
            Gets the type of the project that references the missing file, e.g. the project being loaded.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventArgs.FileName">
      <summary>
            Gets the name of the project file that could not be found.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotFoundEventHandler">
      <summary>
            Represents the method that will handle the <b>ReferencedProjectFileNotFound</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs">
      <summary>
            Provides data for the <see cref="!:Project::ReferencedProjectFileNotSame" /> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs.Cancel">
      <summary>
            Gets or sets a value that indicates if the load (of the referencing project) should be canceled.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs.ContainingProjectType">
      <summary>
            Gets the type of the referenced project being loaded.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventArgs.FileName">
      <summary>
            Gets the name of the project file which is not the same as last time.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ReferencedProjectFileNotSameEventHandler">
      <summary>
            Represents the method that will handle the <b>ReferencedProjectFileNotSame</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.RobotStudioAPI">
      <summary>
            Intended for internal use only.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.AssertMainThread"></member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.DataDirectory">
      <summary>
            Gets path to the directory where RobotStudios data files are stored, typically equal to the installation directory.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.EnableProjectObjectChangedEvents">
      <summary>
            Used to temporarily disable the <see cref="E:ABB.Robotics.RobotStudio.ProjectObject.ProjectObjectChanged" /> event.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Initialize">
      <summary>
            Performs initialization necessary before any other API can be used.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Initialize(System.String)">
      <summary>
            Performs initialization necessary before any other API can be used.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.Initialized">
      <summary>
            Gets a value that indicates if the API has been properly initialized.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.InternalLicense"></member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.IsCondemned">
      <summary>
            Can be set before starting shutdown. Acts as a hint that proper cleanup of memory is not needed (if time consuming),
            since the process is about to die anyway.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.MainThread">
      <summary>
            Gets the main (GUI) <see cref="T:System.Threading.Thread" /> of the application.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.RunOnMainThread(System.Action)">
      <summary>
            Runs an action on the main (GUI) application thread.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Shutdown">
      <summary>
            Performs cleanup before exiting the application. After calling this no other API can be used.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Shutdown(System.Boolean)"></member>
    <member name="E:ABB.Robotics.RobotStudio.RobotStudioAPI.ShuttingDown">
      <summary>
            Occurs when <see cref="M:ABB.Robotics.RobotStudio.RobotStudioAPI.Shutdown" /> is called.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioAPI.SkipThreadAffinityChecks(System.Boolean)"></member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.SyncContext">
      <summary>
            Represents the synchronization context that most API methods must be called on.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.RobotStudioAPI.SynchronizeInvoke">
      <summary>
            Provides a way to execute delegates in the GUI context.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">
      <summary>
            This exception is thrown by certain API methods when the license check fails.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.RobotStudioLicenseException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException" /> class.
            </summary>
      <param name="message"></param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SavingProjectEventArgs">
      <summary>
            Provides data for the <see cref="!:Project::Saving" /> event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.SavingProjectEventArgs.FileName">
      <summary>
            Gets the file name of the saving project.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SavingProjectEventHandler">
      <summary>
            Represents the method that will handle the <b>Saving</b> event of the <see cref="T:ABB.Robotics.RobotStudio.Project" />.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ScreenRecorder">
      <summary>
            Represents a recording device that can record frames from the screen.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.#ctor"></member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.AddFrame">
      <summary>
            Adds a screenshot of the window specified in Start() to the current recording.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.AddFrame(System.Drawing.Bitmap)">
      <summary>
            Adds a frame to the output video.
            The bitmap will be automatically disposed once it has been encoded.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.Compression">
      <summary>
            Get or sets the compression (codec) to be used by the next recording.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.CurrentTime">
      <summary>
            Gets the current time (in seconds) during recording.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.DroppedFrames">
      <summary>
            Gets the number of dropped frames in the current recording.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.Enabled">
      <summary>
            Gets a value that indicates if all preconditions for using the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder" /> are met.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.ScreenRecorder.EncoderException">
      <summary>
            Occurs when the encoding of a video frame fails.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.FileFormat">
      <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat" /> to be used by the next recording.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.FrameRate">
      <summary>
            Gets or sets the desired framerate (frames per second) of the next recording.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.GetCompressors(ABB.Robotics.RobotStudio.ScreenRecorderFileFormat)">
      <summary>
            Returns information about installed and available compressors (codecs)
            for a given file format.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.IncludeMouseCursor">
      <summary>
            Gets or sets a value that indicates if the mouse cursor should be included in the recording.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.MaxHeight">
      <summary>
            Gets or sets the maximum height (in pixels) of the video frame.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.MaxWidth">
      <summary>
            Gets or sets the maximum width (in pixels) of the video frame.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Pause">
      <summary>
            Pause the recording.
            </summary>
      <exception cref="T:System.Exception">The screen recorder is not in <see cref="T:ABB.Robotics.RobotStudio.RecorderState" /> Recording.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.Quality"></member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Resume">
      <summary>
            Resumes a paused recording.
            </summary>
      <exception cref="T:System.Exception">The screen recorder is not in <see cref="T:ABB.Robotics.RobotStudio.RecorderState" /> Paused.</exception>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Start(System.String,System.IntPtr)">
      <summary>
            Starts recording the content of window specified by its handle, to the specified file.
            </summary>
      <param name="filename">The name of the file where the recorded content is stored. </param>
      <param name="hWnd">Handle to the windows for which to record content. Use the <see cref="P:System.Windows.Forms.Control.Handle" /> property to get the window handle for a control.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Start(System.String,System.IntPtr,System.Boolean)">
      <summary>
            Starts recording the content of window specified by its handle, to the specified file.
            </summary>
      <param name="filename">The name of the file where the recorded content is stored. </param>
      <param name="hWnd">Handle to the windows for which to record content. Use the <see cref="P:System.Windows.Forms.Control.Handle" /> property to get the window handle for a control.</param>
      <param name="automatic">True if the system should add frames automatically at the given frame rate, false if not.</param>
      <exception cref="T:System.Exception">The screen recorder is not enabled.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.StartTime">
      <summary>
            Gets or sets a time (in seconds) before which frames should be discarded.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.State">
      <summary>
            Gets the current state of the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder" />.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ScreenRecorder.Stop">
      <summary>
            Stops a recording in progress.
            </summary>
      <exception cref="T:System.Exception">The screen recorder is not in <see cref="T:ABB.Robotics.RobotStudio.RecorderState" /> Stopped.</exception>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.StopTime">
      <summary>
            Gets or sets a time (in seconds) after which recording should stopped automatically.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.SynchronizeInvoke"></member>
    <member name="P:ABB.Robotics.RobotStudio.ScreenRecorder.TotalFrames">
      <summary>
            Gets the number of frames in the current recording.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat">
      <summary>
            Specifies the different output file formats supported by the <see cref="T:ABB.Robotics.RobotStudio.ScreenRecorder" />.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat.Avi">
      <summary>
            This format is no longer supported.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat.Wmv">
      <summary>
            Windows Media Video 
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.ScreenRecorderFileFormat.Mp4">
      <summary>
            MPEG-4
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SectionChangedEventArgs">
      <summary>
            Provides data for the Options.SectionChanged event
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.SectionChangedEventArgs.Section">
      <summary>
            Gets the name of the section that has changed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SectionChangedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Options.SectionChanged" /> event.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">A <see cref="T:ABB.Robotics.RobotStudio.SectionChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Selection">
      <summary>
            Provides access to a collection containing all selected objects.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Selection.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Selection.SelectedObjects">
      <summary>
            Returns the collection containing all selected objects.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SelectionEventArgs">
      <summary>
            Provides data for the ProjectSelection.ObjectAdded and ProjectSelection.ObjectRemoved events.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.SelectionEventArgs.Project"></member>
    <member name="P:ABB.Robotics.RobotStudio.SelectionEventArgs.Reason">
      <summary>
            Gets the reason for the object being added or removed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.SelectionEventArgs.SelectionObject">
      <summary>
            Gets the object that was added or removed.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SelectionEventHandler">
      <summary>
            Represents a method that will handle the <see cref="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectAdded" /> and <see cref="E:ABB.Robotics.RobotStudio.ProjectSelection.ObjectRemoved" /> events.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SelectionReason">
      <summary>
            Reasons for why an object was added to a <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection" />.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SelectionReason.None">
      <summary>
            No reason was specified.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SelectionReason.ObjectCreated">
      <summary>
            The object has been newly created.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SelectionReason.Browser">
      <summary>
            The object was selected in a browser.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SelectionReason.Graphics">
      <summary>
            The object was selected in the graphics.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SignalDataType">
      <summary>
            Specifies the data type of a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal" /></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SignalDataType.Unknown">
      <summary>
            The type of data is unspecified
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SignalDataType.Number">
      <summary>
            The data consists of numeric values
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SignalDataType.Bit">
      <summary>
            The data consists of bit values (1 or 0)
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SignalDataType.String">
      <summary>
            The data consist of string values
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.SignalInterpolationType">
      <summary>
            Specifies the type of interpolation for a <see cref="T:ABB.Robotics.RobotStudio.DataRecorderSignal" /></summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SignalInterpolationType.None">
      <summary>
            The data is not numeric.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SignalInterpolationType.Continuous">
      <summary>
            The data should be interpolated.
            </summary>
    </member>
    <member name="F:ABB.Robotics.RobotStudio.SignalInterpolationType.Discrete">
      <summary>
            The data should be treated as discrete values.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Solution">
      <summary>
            A solution represents a folder structure with associated projects and documents
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Solution.ActiveSolutionFolder">
      <summary>
            Returns the path to the active solution directory, or null if no solution is active.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.Solution.ActiveSolutionFolderChanged">
      <summary>
            Raised when the <see cref="P:ABB.Robotics.RobotStudio.Solution.ActiveSolutionFolder" /> property has changed.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.Solution.ActiveSolutionPath">
      <summary>
            Returns the path to the active solution (.rssln) file, or null if no solution is active.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Solution.ContainingSolutionPath(System.String)">
      <summary>
            Returns the path to the solution (if any) that contains the project with a specified path.
            </summary>
      <param name="projectPath">Path to a project file.</param>
      <returns></returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Solution.Create(System.String,System.String)">
      <summary>
            Creates a new solution structure in the specified folder
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Solution.IsSolutionFolder(System.String)">
      <summary>
            Checks if a folder is a solution folder.
            </summary>
      <param name="folder">Path to a folder.</param>
      <returns>True if the folder is a solution folder.</returns>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ToolControlServices">
      <summary>
            Provides methods for showing a <see cref="T:System.Windows.Forms.Control" /> in the a singleton tool window.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.CloseActiveToolControl">
      <summary>
            Closes the active tool control and removes the tool window.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.CloseActiveToolControl(System.Boolean)">
      <summary>
            Closes the active tool control and optionally removes the tool window.
            </summary>
      <param name="hideWindow">
            Pass false to retain the tool control window in order to reduce flicker.
            </param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.ShowToolControl(System.Windows.Forms.Control,System.String,System.String[])">
      <summary>
            Shows a <see cref="T:System.Windows.Forms.Control" /> in the tool window.
            </summary>
      <param name="toolControl">Control to show.</param>
      <param name="helpID">Help ID for the control</param>
      <param name="tabVisibility">IDs of ribbon tabs for which the control should be visible.</param>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.ToolControlServices.TearOff">
      <summary>
            ABB internal use.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.ToolControlServices.TearOffActiveToolControl">
      <summary>
            ABB internal use.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.ToolControlTearOffEventArgs">
      <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.ToolControlServices.TearOff" /> event.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ToolControlTearOffEventArgs.Abort">
      <summary>
            Gets or sets a value that indicates if the operation should be aborted.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ToolControlTearOffEventArgs.NewControl">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Control" /> that will be shown in the tear-off window.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.ToolControlTearOffEventArgs.SourceControl">
      <summary>
            Gets the <see cref="T:System.Windows.Forms.Control" /> that should be replicated in a tear-off window.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.UndoContext">
      <summary>
            Gives access to a state based undo mechanism for <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />s. Each <see cref="T:ABB.Robotics.RobotStudio.Project" /> has its own undo context.
            The undo context makes it possible to group changes to <see cref="T:ABB.Robotics.RobotStudio.ProjectObject" />s. All changes in the group can then be undone and redone.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.AddChange(ABB.Robotics.RobotStudio.IChange)">
      <summary>
            Adds an undoable operation (see <see cref="T:ABB.Robotics.RobotStudio.IChange" />).
            </summary>
      <param name="change"></param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.AppendToUndoStep(System.String)">
      <summary>
            Similar to <see cref="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep(System.String)" />, but tries to append changes to the previous
            undo step, instead of creating a new one.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.AppendToUndoStep(System.String,System.Boolean)">
      <summary>
            Similar to <see cref="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep(System.String)" />, but tries to append changes to the previous
            undo step, instead of creating a new one.
            </summary>
      <param name="name">Name of undo step, if a new one is created.</param>
      <param name="forceAppend">If true, changes are appended to the previous undostep (if one exists) even if the names do not match.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep">
      <summary>
            Starts a new unnamed undo step.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.BeginUndoStep(System.String)">
      <summary>
            Begins a new undo step.
            </summary>
      <param name="name">The name of the undo step.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.CancelUndoStep(ABB.Robotics.RobotStudio.CancelUndoStepType)">
      <summary>
            Marks the current undo step as canceled.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.CanRedo">
      <summary>
            Returns true if there are entries in the Redo queue, otherwise false.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.CanUndo">
      <summary>
            Returns true if there are entries in the Undo queue, otherwise false.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.Clear">
      <summary>
            Clears the Undo and Redo queues.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.CurrentUndoStepName">
      <summary>
            Gets or sets the name of the current undo step
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.EndUndoStep">
      <summary>
            Ends the current undo step.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.ExecuteUndoStep(System.String,System.Action)">
      <summary>
            Creates an undo step and executes the code in the passed in delegate inside it.
            </summary>
      <returns>
            True if the operation succeeded, false if an exception was thrown.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.ExecuteUndoStep(System.String,System.Action,System.Action{System.Exception})">
      <summary>
            Creates an undo step and executes the code in the passed in delegate inside it.
            </summary>
      <returns>
            True if the operation succeeded, false if an exception was thrown.
            </returns>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.GetRedoNames">
      <summary>
            Returns an array of the names of all redo steps in the redo queue
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.GetUndoNames">
      <summary>
            Returns an array of the names of all undo steps in the undo queue
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.IsAppending">
      <summary>
            Returns true if the active undo step has been opened using AppendToUndoStep()
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.IsInUndoStep">
      <summary>
            Returns true if the application is currently inside an undo step.
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.NumRedoSteps">
      <summary>
            Returns the number of available Redo steps
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.NumUndoSteps">
      <summary>
            Returns the number of available Undo steps
            </summary>
    </member>
    <member name="P:ABB.Robotics.RobotStudio.UndoContext.QueueSize">
      <summary>
            Gets or sets the maximum size for the Undo and Redo queues.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.Redo">
      <summary>
            Redoes the changes undone by the last call to Undo()
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.UndoContext.Redoing">
      <summary>
            Occurs before a redo operation.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.UndoContext.Redone">
      <summary>
            Occurs after a redo operation.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.ResumeUndoStep">
      <summary>
            Resumes collection of undoable changes.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.SuspendUndoStep">
      <summary>
            Temporarily disables collection of undoable changes.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.UndoContext.Undo">
      <summary>
            Undoes the operations made during the last undo step.
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.UndoContext.Undoing">
      <summary>
            Occurs before an undo operation. 
            </summary>
    </member>
    <member name="E:ABB.Robotics.RobotStudio.UndoContext.Undone">
      <summary>
            Occurs after an undo operation.
            </summary>
    </member>
    <member name="T:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger">
      <summary>
            Contains methods to add information to the internal application log,
            which can be used by support personnel to determine the cause of an application error.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.#ctor"></member>
    <member name="P:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.CurrentLogFile">
      <summary>
            Returns the location of the log file for the current session.
            </summary>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogError(System.String)">
      <summary>
            Adds an error message and flushes the log to disk.
            </summary>
      <param name="message">Message to add</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.Exception)">
      <summary>
            Adds an exception error message and flushes the log to disk. Also adds the message to the Logger.
            </summary>
      <param name="ex">Exception</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.Exception,System.Boolean)">
      <summary>
            Adds an exception error message and flushes the log to disk.
            </summary>
      <param name="ex">Exception</param>
      <param name="toOutput">True to also add a message to the Logger</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.String,System.Exception)">
      <summary>
            Adds an exception error message and flushes the log to disk.
            </summary>
      <param name="message">Message</param>
      <param name="ex">Exception</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogException(System.String,System.Exception,System.Boolean)">
      <summary>
            Adds an exception error message and flushes the log to disk.
            </summary>
      <param name="message">Message</param>
      <param name="ex">Exception</param>
      <param name="toOutput">True to also add a message to the Logger</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogExceptionOnce(System.Exception,System.Boolean)">
      <summary>
            Adds an exception error message and flushes the log to disk, unless an equivalent
            exception has already been logged.
            </summary>
      <param name="ex">Exception</param>
      <param name="toOutput">True to also add a message to the Logger</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogExceptionOnce(System.String,System.Exception,System.Boolean)">
      <summary>
            Adds an exception error message and flushes the log to disk, unless an equivalent
            exception has already been logged.
            </summary>
      <param name="message">Message</param>
      <param name="ex">Exception</param>
      <param name="toOutput">True to also add a message to the Logger</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogInfo(System.String)">
      <summary>
            Adds a general message to the log.
            </summary>
      <param name="message">Message to add</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogState(System.String,System.String)">
      <summary>
            Sets a named state in the log.
            </summary>
      <param name="state">State to set</param>
      <param name="message">Message regarding the state, or empty string to clear the state.</param>
    </member>
    <member name="M:ABB.Robotics.RobotStudio.Diagnostics.ApplicationLogger.LogThread(System.String,System.Boolean)">
      <summary>
            Adds a message when a thread starts or ends.
            </summary>
      <param name="thread">Name of the thread</param>
      <param name="start">Indicates if the thread is starting (true) or ending (false)</param>
    </member>
  </members>
</doc>