<?xml version="1.0"?>
<doc>
    <assembly>
        <name>aWireFrameToRobot</name>
    </assembly>
    <members>
        <member name="T:WireFrameToRobot.Label`1">
            <summary>
            class that represents a label
            contains raw label geometry, geometry aligned to face
             and the ID of the surface
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WireFrameToRobot.Label`1.AlignGeoToSolid(System.Collections.Generic.IEnumerable{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            align the label geometry to the solid that it represents
            </summary>
            <param name="geo"></param>
            <returns></returns>
        </member>
        <member name="T:WireFrameToRobot.OrientationStrategy">
            <summary>
            a strategy for orientation of the node
            </summary>
        </member>
        <member name="F:WireFrameToRobot.OrientationStrategy.AllNodesOrientedToWorldXYZ">
            <summary>
            orients the node so that its XYZ are aligned with the world coordinate system 
            </summary>
        </member>
        <member name="F:WireFrameToRobot.OrientationStrategy.AllNodesSameAsBaseGeo">
            <summary>
            aligns the nodes so that they are the same as the coordinateSystem of baseNode geometry
            </summary>
        </member>
        <member name="F:WireFrameToRobot.OrientationStrategy.AverageStrutsVector">
            <summary>
            This strategy orients the nodes so that all struts vectors are averaged to produce
            a normal vector for a plane, the node is oriented to this plane, but it's X and Y axes are
            undefined.
            </summary>
        </member>
        <member name="F:WireFrameToRobot.OrientationStrategy.AverageStrutsAlignToZExactly">
            <summary>
            This strategy orients the nodes so that all struts vectors are averaged to produce
            a normal vector for a plane, the node is oriented to this plane, and the X axis of this plane is
            aligned exactly to the 0,0,1 axis. This means its possible that the computed average vector is not 
            exactly used as the normal.
            </summary>
        </member>
        <member name="F:WireFrameToRobot.OrientationStrategy.AverageStrutsAlignToStrut">
            <summary>
            This strategy orients the nodes so that all struts vectors are averaged to produce
            a normal vector for a plane, the node is oriented to this plane, and the X axis of this plane is
            aligned as much as possible with the vector defined by the first strut in the node's
            list of struts -struts are not ordered per node, so to get around this we atttempt to find
            a similar set of struts that we've already seen and always use the same strut used for that "Type"
            </summary>
        </member>
        <member name="F:WireFrameToRobot.OrientationStrategy.AverageStrutsFindTypes">
            <summary>
            This strategy orients the nodes so that all struts vectors are averaged to produce
            a normal vector for a plane, the node is oriented to this plane, and an attempt is made to use the same x Axis
            for the same configuration of struts so that these nodes are the same
            </summary>
        </member>
        <member name="F:WireFrameToRobot.OrientationStrategy.OrientationProvided">
            <summary>
            this strategy is not implemented yet
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.Center">
            <summary>
            the center of the node
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.NodeGeometry">
            <summary>
            the fully differenced geometry of the node oriented in space 
            with the struts subtracted out
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.Struts">
            <summary>
            a list of strut objects that belong to this node
            these objects wont be unique if this method is run on
            two nodes that share a strut, that strut will be retrieved twice.
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.ID">
            <summary>
            the ID of the node is a simple number with the prefix N
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.OrientedNodeGeometry">
            <summary>
            the node geometry oriented in space, but before any boolean operations
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.HolderFace">
            <summary>
            gets the holder face of the node - this is assumed to be the top most surface of the node before orientation occurs
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.holderRep">
            <summary>
            a simple representation of the holder - can be used as a reference point
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Node.DrillDepth">
            <summary>
            the depth a strut should extend through the surface of the node
            </summary>
        </member>
        <member name="M:WireFrameToRobot.Node.FindNodeTypes(System.Collections.Generic.List{WireFrameToRobot.Node})">
            <summary>
            this method groups nodes by type defined by their cut planes
            </summary>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Node.FindNodeTypesUsingHash(System.Collections.Generic.List{WireFrameToRobot.Node},System.Int32)">
            <summary>
            this method finds types of nodes by hashing their cut planes axes to 4 digits of tolerance
            </summary>
            <param name="nodesToGroup"></param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Node.SameNode(WireFrameToRobot.Node,WireFrameToRobot.Node)">
            <summary>
            compares nodes for similarity by their planes
            </summary>
            <param name="nodea"></param>
            <param name="nodeb"></param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Node.NodeTypeHash(System.Int32)">
            <summary>
            hash a node using the xor of their planes hash
            </summary>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Node.PlaneTypeHash(Autodesk.DesignScript.Geometry.Plane,System.Int32)">
            <summary>
            hash a plane by its axes rounded to x digits
            </summary>
            <param name="pln"></param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Node.VectorListTypeHash(System.Collections.Generic.IEnumerable{Autodesk.DesignScript.Geometry.Vector},System.Int32)">
            <summary>
            hash a set of vectors to x digits to produce a hashkey
            </summary>
            <param name="pln"></param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Node.ByPointsLinesAndGeoOrientationStrategy(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Line},System.Double,Autodesk.DesignScript.Geometry.Solid,WireFrameToRobot.OrientationStrategy,System.Double)">
            <summary>
            construct list of nodes from a list of points and lines, this method finds the struts that belong 
            to each node, orient them correctly, and constructs a geometric representation of the individual nodes
            from some base geometry which is oriented in a variety of ways
            </summary>
            <param name="nodeCenters"> the points where the nodes are positioned</param>
            <param name="struts"> the lines that represent the struts, these must be intersecting the points at their endpoints</param>
            <param name="strutDiameter"> the diameter of the struts</param>
            <param name="drillDepth"> the depth that a strut should be sunk into the surface of node</param>
            <param name="baseNode"></param>
            <param name="nodeOrientationStrategy"></param>
            <returns></returns>
        </member>
        <member name="P:WireFrameToRobot.Strut.ID">
            <summary>
            an ID generated based on the nodes this strut is connected to
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Strut.LineRepresentation">
            <summary>
            the line which represents this strut
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Strut.TrimmedLineRepresentation">
            <summary>
            a line representation which represents the trimmed strut taking into account the drill depth
            of the owner Node
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Strut.OwnerNode">
            <summary>
            the node which this strut object belongs to
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Strut.Diameter">
            <summary>
            the diameter of the strut geometry
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Strut.StrutGeometry">
            <summary>
            a solid circular sweep along the line
            </summary>
        </member>
        <member name="M:WireFrameToRobot.Strut.GetLabels(System.Double)">
            <summary>
            get labels for the strut - showing its ID as geometry
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="P:WireFrameToRobot.Strut.CutPlaneOnStrut">
            <summary>
            this plane represents the cut vector on the strut, it's not transformed to the origin
            </summary>
        </member>
        <member name="P:WireFrameToRobot.Strut.CutPlaneAtOrigin">
            <summary>
            get the cut plane after it has been transformed around the origin (using the inverse transform of its owner node)
            </summary>
        </member>
        <member name="M:WireFrameToRobot.Strut.AlignedCutPlaneWithACos(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            This returns the transformedCutPlane after its been rotated around the Z axis so that its X axis
            aligns with guide vector - NOTE, this does not seem to work in all cases but apparently solves the
            robot reach issues we were having
            </summary>
            <param name="alignTo"></param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Strut.AlignedCoordinateSystemAtOrigin(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            This method returns a coordinateSystem from the TransformedAlignedCutPlane, this is useful for visualization
            The coordinateSystems will appear at the origin since they are transformed using the inverse
            </summary>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Strut.AlignedCutPlaneAtOrigin(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            attempts to find an aligned plane such that the X axis of the cut plane matches the guide vector using rotation marching, gets a nearly ~aligned~ plane
            </summary>
            <param name="alignTo"></param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Strut.#ctor(Autodesk.DesignScript.Geometry.Line,System.Double,WireFrameToRobot.Node)">
            <summary>
            construct a new strut object, this method computes the strut geometry and caches it on the strut
            </summary>
            <param name="line"></param>
            <param name="diameter"></param>
            <param name="owner"></param>
        </member>
        <member name="M:WireFrameToRobot.Strut.StrutInHolderExclusionZone">
            <summary>
            check if the cutplane normal angle is withing 30 degrees of the holder face of the node
            </summary>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Strut.CalculateWastedStrutLengthByNodes(System.Int32,System.Double,System.Collections.Generic.List{WireFrameToRobot.Node})">
            <summary>
            calculate the wasted strut length by finding the first remaining material we can use
            this does not give us the optimal solution, but a good general metric
            </summary>
            <param name="numberOfStrut"> number of struts of the strut length we have at the start of the operation</param>
            <param name="lengthOfStruts"> the length of a standard uncut strut</param>
            <param name="nodesToCut"> finds the unique struts of this list of nodes and calculates based on that</param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Strut.CalculateWastedStrutLengthByStruts(System.Int32,System.Double,System.Collections.Generic.List{WireFrameToRobot.Strut})">
            <summary>
            calculate the wasted strut length by finding the first remaining material we can use
            this does not give us the optimal solution, but a good general metric
            </summary>
            <param name="numberOfStrut"> number of struts of the strut length we have at the start of the operation</param>
            <param name="lengthOfStruts"> the length of a standard uncut strut</param>
            <param name="strutsToCut">the struts to make, duplicates are not removed from this list</param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Extensions.GeometryExtensions.PruneDuplicates(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Line})">
            <summary>
            prune duplicate lines by using start and endpoints to check for equality
            </summary>
            <param name="allLines"></param>
            <returns></returns>
        </member>
        <member name="M:WireFrameToRobot.Extensions.GeometryExtensions.SameLine(Autodesk.DesignScript.Geometry.Line,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            checks equality between lines by checking if the start and endpoints match,
            even if these are reversed this method return true.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
    </members>
</doc>
